let mapleader=';'
nnoremap :W :w
inoremap ;; <Esc>
nnoremap <silent> <leader>ec :tabnew ~/.config/nvim/init.vim<CR> 
nnoremap <leader>vs :silent exec "!open 1://file/" . expand("%:p") . ":" . line(".") . ":" . col(".")<cr>:redraw!<cr>
nmap <leader>T :sp<bar>term<cr><c-w>J:resize10<cr>
tnoremap <Esc> <C-\><C-n>
    execute "!grep map " . b:vimrc . " > " . b:mirrorpath . "key.txt"
nnoremap <silent> <leader>sc :source %<CR>:call SaveConfig()<CR>
nnoremap tn :tabnew<CR>
nnoremap tt :tabnext<CR>
nnoremap tc :tabclose<CR>
nnoremap <C-l> :nohlsearch<CR>	   
" nnoremap nt :NERDTreeToggle<CR>:TagbarToggle<CR>
nnoremap nt :NERDTreeToggle<CR>
nnoremap tb :TagbarToggle<CR>
" these "Ctrl mappings" work well when Caps Lock is mapped to Ctrl
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>
  tmap <C-o> <C-\><C-n>
nnoremap df :DartFmt<cr>
let g:lsc_auto_map = v:true
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
autocmd FileType dart nnoremap <leader>r :CocCommand flutter.run<CR>
autocmd FileType dart nnoremap <leader>g :CocCommand flutter.pub.get<CR>
autocmd FileType dart nnoremap <leader>d :CocCommand flutter.devices<CR>
autocmd FileType dart nnoremap <leader>fr :CocCommand flutter.dev.hotReload<CR>
autocmd FileType dart nnoremap <leader>fR :CocCommand flutter.dev.hotRestart<CR>
autocmd FileType dart nnoremap <leader>l :CocCommand flutter.dev.openDevLog<CR>
autocmd FileType dart nnoremap <leader>q :CocCommand flutter.dev.quit<CR>
autocmd FileType dart nnoremap <leader>fT :CocCommand flutter.dev.openProfiler<CR>
" autocmd FileType dart nnoremap <leader>Ea 
autocmd FileType dart nnoremap ol :CocCommand flutter.toggleOutline<CR>
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : 
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
nnoremap <silent> <leader>es :split<CR>:CocCommand snippets.editSnippets<CR>
autocmd FileType go nmap <leader>r :GoRun<CR>
" autocmd FileType go nnoremap gb :GoBuild<CR>
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <leader>t :GoTestFunc<CR>
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <Leader>cb <Plug>(go-coverage-browser)
autocmd FileType go nmap <leader>d :GoDecls<CR>
autocmd FileType go nmap <leader>dd :GoDeclsDir<CR>
autocmd FileType go nmap <leader>fv :'<,'>GoFreevars<CR>
let g:go_def_mapping_enabled = 0
autocmd FileType go nnoremap cj :cnext<CR>
autocmd FileType go nnoremap ck :cprevious<CR>
autocmd FileType go nnoremap cq :cclose<CR>
autocmd FileType julia nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
autocmd FileType julia nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
autocmd FileType julia nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
nmap <leader>ff <Plug>(coc-format-selected)
nmap <leader>rn <Plug>(coc-rename)
nmap <leader>gd <Plug>(coc-definition)
nmap <leader>gy <Plug>(coc-type-definition)
nmap <leader>gi <Plug>(coc-implementation)
nmap <leader>gr <Plug>(coc-references)
nnoremap <silent> K :call <SID>show_documentation()<CR>
